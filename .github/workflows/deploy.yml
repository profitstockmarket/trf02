name: Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'angular.json'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig*.json'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Fallback so the action doesn't fail hard if the repo var is missing
      AWS_REGION: ${{ vars.AWS_REGION || 'us-east-2' }}
      S3_BUCKET: ${{ vars.S3_BUCKET || '' }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app
        run: npm run build

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload static assets to S3 (immutable)
        run: |
          ASSETS_DIR="dist/trf02/browser"
          echo "Using AWS region: $AWS_REGION"
          echo "Uploading to bucket: $S3_BUCKET"
          echo "Listing build output:"
          ls -la "$ASSETS_DIR" || true
          aws s3 sync "$ASSETS_DIR" "s3://$S3_BUCKET/" \
            --delete \
            --exclude "index.html" \
            --cache-control "public,max-age=31536000,immutable"

      - name: Upload index.html to S3 (short cache)
        run: |
          set -euo pipefail
          ASSETS_DIR="dist/trf02/browser"
          INDEX_FILE="$ASSETS_DIR/index.html"
          echo "Attempting upload from: $INDEX_FILE"
          if [ ! -f "$INDEX_FILE" ]; then
            echo "index.html not found at $INDEX_FILE. Searching for alternatives..." >&2
            echo "Listing HTML files under $ASSETS_DIR:" >&2
            find "$ASSETS_DIR" -maxdepth 1 -type f -name '*.html' -print || true
            # Known Angular SSR variants
            for candidate in \
              "$ASSETS_DIR/index.csr.html" \
              "$ASSETS_DIR/index.client.html" \
              "$ASSETS_DIR/index.browser.html"; do
              if [ -f "$candidate" ]; then
                echo "Using fallback candidate: $candidate" >&2
                INDEX_FILE="$candidate"
                break
              fi
            done
            if [ ! -f "$INDEX_FILE" ]; then
              # Pick first html file in the assets dir if available
              CANDIDATE=$(find "$ASSETS_DIR" -maxdepth 1 -type f -name '*.html' | head -n 1 || true)
              if [ -n "${CANDIDATE:-}" ] && [ -f "$CANDIDATE" ]; then
                echo "Using discovered HTML file: $CANDIDATE" >&2
                INDEX_FILE="$CANDIDATE"
              fi
            fi
          fi
          if [ ! -f "$INDEX_FILE" ]; then
            echo "No index-like HTML file found in $ASSETS_DIR. Build output layout may differ." >&2
            echo "Full dist listing for diagnostics:" >&2
            find dist -maxdepth 4 -type f -print | sed 's/^/  /'
            exit 1
          fi
          echo "Final source file: $INDEX_FILE"
          # First try via s3 cp
          if ! aws s3 cp "$INDEX_FILE" "s3://$S3_BUCKET/index.html" \
            --cache-control "public,max-age=60" \
            --content-type "text/html; charset=utf-8"; then
            echo "aws s3 cp failed; retrying with s3api put-object (adding SSE)" >&2
            aws s3api put-object \
              --bucket "$S3_BUCKET" \
              --key "index.html" \
              --body "$INDEX_FILE" \
              --cache-control "public,max-age=60" \
              --content-type "text/html; charset=utf-8" \
              --server-side-encryption AES256
          fi

      - name: Skip CloudFront invalidation (no ID or not main)
        if: env.CLOUDFRONT_DISTRIBUTION_ID == '' || github.ref != 'refs/heads/main'
        run: |
          echo "::notice title=Skipping CloudFront invalidation::Either CLOUDFRONT_DISTRIBUTION_ID is not set or branch is not 'main'."

      - name: Invalidate CloudFront cache
        if: env.CLOUDFRONT_DISTRIBUTION_ID != '' && github.ref == 'refs/heads/main'
        run: |
          set +e
          OUT=$(aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
            --paths "/*" 2>&1)
          STATUS=$?
          echo "$OUT"
          if [ $STATUS -ne 0 ]; then
            if echo "$OUT" | grep -qi 'AccessDenied'; then
              echo "::notice title=CloudFront invalidation skipped::AccessDenied for cloudfront:CreateInvalidation. Proceeding without failing the job."
              exit 0
            else
              echo "::error title=CloudFront invalidation failed::$OUT"
              exit $STATUS
            fi
          fi
